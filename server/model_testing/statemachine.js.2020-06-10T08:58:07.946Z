const aa = require("aa");
const assert = require("assert");
const hex2ascii = require('hex2ascii')
const Machine = require("xstate").Machine;
const assign = require("xstate").assign;
const interpret = require("xstate").interpret;
const createModel = require("@xstate/test").createModel;
const FiscoFuzzer = require("../connection/fisco/fuzzer.js").FiscoFuzzer;
const FiscoDeployer = require("../connection/fisco/fuzzer.js").FiscoDeployer;
let asyncFlag = false;

function revertAsyncFlag() {
asyncFlag = !asyncFlag;
}


// contract interface 

class BlindAuction {
constructor(fuzzer) {
  this.address = "0x2c4f18915b7daa5d5c01c26778c59df560024b56";
  this.name = "BlindAuction";
  this.fuzzer = fuzzer;
}

async close() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "close");
  return fuzz;
}

async unbid() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "unbid");
  return fuzz;
}

async withdraw() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "withdraw");
  return fuzz;
}

async reveal() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "reveal");
  return fuzz;
}

async cancelRB() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "cancelRB");
  return fuzz;
}

async cancelABB() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "cancelABB");
  return fuzz;
}

async finish() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "finish");
  return fuzz;
}

async bid() {
  let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", "0x2c4f18915b7daa5d5c01c26778c59df560024b56", "bid");
  return fuzz;
}

}
// state machine context
class StateMachineCtx {
constructor(fuzzer) {
  this.BlindAuction = new BlindAuction(fuzzer);

  this.state = {
    "id": "FSM#2"
  };
  this.fuzzer = fuzzer;
}
static getInstance(fuzzer) {
  if (!StateMachineCtx.instance)
    StateMachineCtx.instance = new StateMachineCtx(fuzzer);
  return StateMachineCtx.instance;
}
getState() {
  //TO DO, set what your state means and how to get the state

}
// action_functions_mapping
async action_bid() {
  let ret = [];
  if (asyncFlag) {
    // PreCondition. TO DO
    let retbid = await StateMachineCtx.getInstance().BlindAuction.bid();
    ret.push(retbid);

    // PostCondition. TO DO
  }
  return ret;
}
async action_unbid() {
  let ret = [];
  if (asyncFlag) {
    // PreCondition. TO DO
    let retunbid = await StateMachineCtx.getInstance().BlindAuction.unbid();
    ret.push(retunbid);

    // PostCondition. TO DO
  }
  return ret;
}
async action_close() {
  let ret = [];
  if (asyncFlag) {
    // PreCondition. TO DO
    let retclose = await StateMachineCtx.getInstance().BlindAuction.close();
    ret.push(retclose);

    // PostCondition. TO DO
  }
  return ret;
}
async action_reveal() {
  let ret = [];
  if (asyncFlag) {
    // PreCondition. TO DO
    let retreveal = await StateMachineCtx.getInstance().BlindAuction.reveal();
    ret.push(retreveal);

    // PostCondition. TO DO
  }
  return ret;
}
async action_finish() {
  let ret = [];
  if (asyncFlag) {
    // PreCondition. TO DO
    let retfinish = await StateMachineCtx.getInstance().BlindAuction.finish();
    ret.push(retfinish);

    // PostCondition. TO DO
  }
  return ret;
}
}
// state machine 
const createStateMachine = statectx => {
return Machine({
  id: "FSM#2",
  initial: "initial",
  context: {
    ctx: statectx
  },
  states: {

    initial: {
      on: {
        bid: {
          target: "ABB",
          actions: "action_bid"
        }
      }
    },
    ABB: {
      on: {
        bid: {
          target: "ABB",
          actions: "action_bid"
        },
        unbid: {
          target: "C",
          actions: "action_unbid"
        },
        close: {
          target: "RB",
          actions: "action_close"
        }
      }
    },
    C: {
      type: "final"
    },
    RB: {
      on: {
        reveal: {
          target: "RB",
          actions: "action_reveal"
        },
        withdraw: {
          target: "F",
          actions: "action_withdraw"
        }
      }
    },
    F: {
      type: "final"
    }
  }
}, {
  actions: {
    action_bid: statectx.action_bid,
    action_unbid: statectx.action_unbid,
    action_close: statectx.action_close,
    action_reveal: statectx.action_reveal,
    action_finish: statectx.action_finish
  }
});
}


class FiscoStateMachineFuzzer extends FiscoFuzzer {
constructor(seed, contract_name, ) {
  super(seed, contract_name);
}
static getInstance(seed, contract_name) {
  if (!FiscoStateMachineFuzzer.instance) {
    FiscoStateMachineFuzzer.instance = new FiscoStateMachineFuzzer(seed, contract_name)
  }
  return FiscoStateMachineFuzzer.instance;
}
async bootstrap(socket) {
  let stateMachine = createStateMachine(
    StateMachineCtx.getInstance(
      FiscoStateMachineFuzzer.getInstance()
    ));
  // console.log(stateMachine.context);
  let service = interpret(stateMachine).onTransition(state => {
    console.log(state.value);
  });
  service = aa.promisifyAll(service);
  // console.log(stateMachine);
  const toggleModel = createModel(stateMachine);
  console.log(JSON.stringify(toggleModel));
  console.log(toggleModel.machine.context);
  console.log("******************************");
  let plans = toggleModel.getSimplePathPlans();
  console.log("size of  simplepath plans:", plans.length);
  let index = 1;
  for (let plan of plans) {
    console.log("plan#", index++);
    for (let path of plan.paths) {
      console.log(path.description);
    }
  }
  console.log("******************************");
  plans = toggleModel.getShortestPathPlans();
  console.log("size of shortestpath plans:", plans.length);
  index = 1;
  for (let plan of plans) {
    console.log("plan#", index++);
    for (let path of plan.paths) {
      console.log(path.description);
    }
  }
  console.log("******************************");
  index = 1;
  for (let plan of plans) {
    console.log("plan#", index++);
    for (let path of plan.paths) {
      let start = service.start();
      let events = path.description.split("via ")[1].split(" â†’ ");
      console.log(path.description);
      console.log("transition by event ", events);
      let state = service.send(events);
      // console.log(state);
      console.log(state.actions);
      revertAsyncFlag();
      let startTime = Date.now() / 1000;
      for (let action of state.actions) {

        let ret = await action.exec(start.context, undefined);
        console.log(action.type, ret);
        console.log({
          event: "Action_Report",
          data: {
            startTime: startTime,
            currentTime: Date.now() / 1000,
            plan: state.actions,
            action: action.type
          }
        });
        socket.emit("server", {
          event: "Action_Report",
          data: {
            startTime: startTime,
            currentTime: Date.now() / 1000,
            plan: state.actions,
            action: action.type
          }
        });
        // while (ret.length == 0) {
        //     ret = await action.exec(start.context, undefined);
        //     console.log(action.type, ret);
        // }
      }
      revertAsyncFlag();
      service.stop();
      // console.log(path.segments);
    }
    console.log("Approaching fsm state->", plan.state.value);
    console.log("********************************************");
    // if (index == 3)
    //     break;
  }

  return {
    callFuns: [],
    execResults: []
  };
}

async _seed_callSequence() {
  console.log(__filename, "_seed_callSequence");
  let ret = await super._seed_callSequence();
  return ret;
}
}
module.exports.FiscoStateMachineFuzzer = FiscoStateMachineFuzzer