const aa = require("aa");
// var Set = require("collections/set");
const assert = require("assert");
const hex2ascii = require('hex2ascii')
const Machine = require("xstate").Machine;
const assign = require("xstate").assign;
const interpret = require("xstate").interpret;
const createModel = require("@xstate/test").createModel;
const FiscoFuzzer = require("../connection/fisco/fuzzer.js").FiscoFuzzer;
const FiscoDeployer = require("../connection/fisco/fuzzer.js").FiscoDeployer;
let asyncFlag = false;

function revertAsyncFlag() {
  asyncFlag = !asyncFlag;
}


// contract interface 

class BlindAuction {
  constructor(fuzzer) {
    this.address = "0xe438d331444aa190ca8f8a85f85339b3b1e9a0db";
    this.name = "BlindAuction";
    this.fuzzer = fuzzer;
  }

  async close() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "close");
    return fuzz;
  }

  async unbid() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "unbid");
    return fuzz;
  }

  async withdraw() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "withdraw");
    return fuzz;
  }

  async reveal() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "reveal");
    return fuzz;
  }

  async cancelRB() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "cancelRB");
    return fuzz;
  }

  async state() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "state");
    return fuzz;
  }

  async cancelABB() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "cancelABB");
    return fuzz;
  }

  async finish() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "finish");
    return fuzz;
  }

  async bid() {
    let fuzz = await this.fuzzer.full_fuzz_fun("BlindAuction", this.address, "bid");
    return fuzz;
  }

}
// state machine context
class StateMachineCtx {
  constructor(fsmreplayer, fuzzer) {
    this.BlindAuction = new BlindAuction(fuzzer);

    this.state = {
      "id": "FSM#2"
    };
    this.fuzzer = fuzzer;
    this.fsmreplayer = fsmreplayer;
  }
  async initialize() {
    this.BlindAuction.address = await this.fsmreplayer.initialize();
  }
  static getInstance(fsmreplayer, fuzzer) {
    if (!StateMachineCtx.instance)
      StateMachineCtx.instance = new StateMachineCtx(fsmreplayer, fuzzer);
    return StateMachineCtx.instance;
  }
  getState() {
    //TO DO, set what your state means and how to get the state
    if (this.BlindAuction.state) {
      let ret = await this.BlindAuction.state();
      this.state = BigInt(ret.receipt.result.output.toString());
    } else if (this.BlindAuction.stage) {
      let ret = await this.BlindAuction.stage();
      this.state = BigInt(ret.receipt.result.output.toString());
    } else {
      this.state = null;
    }
    console.log("state:", this.state);
    return this.state;
  }
  // action_functions_mapping
  async action_bid() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 0 || this.state == 0, "preCondition violated: current state is " + this.state);

      let retbid = await StateMachineCtx.getInstance().BlindAuction.bid();
      ret.push(retbid);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 0 || this.state == 0, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_unbid() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 3, "preCondition violated: current state is " + this.state);

      let retunbid = await StateMachineCtx.getInstance().BlindAuction.unbid();
      ret.push(retunbid);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 3, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_close() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 0, "preCondition violated: current state is " + this.state);

      let retclose = await StateMachineCtx.getInstance().BlindAuction.close();
      ret.push(retclose);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 1, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_reveal() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 1, "preCondition violated: current state is " + this.state);

      let retreveal = await StateMachineCtx.getInstance().BlindAuction.reveal();
      ret.push(retreveal);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 1, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_finish() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 1, "preCondition violated: current state is " + this.state);

      let retfinish = await StateMachineCtx.getInstance().BlindAuction.finish();
      ret.push(retfinish);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 2, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_withdraw() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 2, "preCondition violated: current state is " + this.state);

      let retwithdraw = await StateMachineCtx.getInstance().BlindAuction.withdraw();
      ret.push(retwithdraw);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 2, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_cancelRB() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 1, "preCondition violated: current state is " + this.state);

      let retcancelRB = await StateMachineCtx.getInstance().BlindAuction.cancelRB();
      ret.push(retcancelRB);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 3, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
  async action_cancelABB() {
    let ret = [];
    if (asyncFlag) {
      // PreCondition. 
      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 0, "preCondition violated: current state is " + this.state);

      let retcancelABB = await StateMachineCtx.getInstance().BlindAuction.cancelABB();
      ret.push(retcancelABB);

      await StateMachineCtx.getInstance().getState();
      assert(!this.state || this.state == 3, , "postCondition violated: current state is " + this.state);
      // PostCondition. 
    }
    return ret;
  }
}
// state machine 
const createStateMachine = statectx => {
  return Machine({
    id: "FSM#2",
    initial: "initial",
    context: {
      ctx: statectx
    },
    states: {

      initial: {
        on: {
          bid: {
            target: "ABB",
            actions: "action_bid"
          }
        }
      },
      ABB: {
        on: {
          bid: {
            target: "ABB",
            actions: "action_bid"
          },
          cancelABB: {
            target: "C",
            actions: "action_cancelABB"
          },
          close: {
            target: "RB",
            actions: "action_close"
          }
        }
      },
      RB: {
        on: {
          reveal: {
            target: "RB",
            actions: "action_reveal"
          },
          finish: {
            target: "F",
            actions: "action_finish"
          },
          cancelRB: {
            target: "C",
            actions: "action_cancelRB"
          }
        }
      },
      F: {
        on: {
          withdraw: {
            target: "F",
            actions: "action_withdraw"
          }
        }
      },
      C: {
        on: {
          unbid: {
            target: "C",
            actions: "action_unbid"
          }
        }
      }
    }
  }, {
    actions: {
      action_bid: statectx.action_bid,
      action_unbid: statectx.action_unbid,
      action_close: statectx.action_close,
      action_reveal: statectx.action_reveal,
      action_finish: statectx.action_finish,
      action_withdraw: statectx.action_withdraw,
      action_cancelRB: statectx.action_cancelRB,
      action_cancelABB: statectx.action_cancelABB
    }
  });
}

module.exports.StateMachineCtx = StateMachineCtx
module.exports.revertAsyncFlag = revertAsyncFlag;
module.exports.createStateMachine = createStateMachine